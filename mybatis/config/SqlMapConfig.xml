<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 属性定义 可以将通用的属性值配置在mybatis中 -->
	<properties resource="db.properties">
		<!-- 优先级：parameterType定义的变量 > properties中的变量> property节点中的变量 -->
		<!-- <property name="" value=""/> -->
	</properties>
	
	<settings>
		<setting name="logImpl" value="LOG4J" />
		<!-- settings是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 -->
		<!-- 该配置影响的所有映射器中配置的缓存的全局开关。默认值true -->
		<!-- <setting name="cacheEnabled" value="true" /> -->
		<!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认值false -->
		<!-- <setting name="lazyLoadingEnabled" value="true" /> -->
		<!-- 是否允许单一语句返回多结果集（需要兼容驱动）。 默认值true -->
		<!-- <setting name="multipleResultSetsEnabled" value="true" /> -->
		<!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。默认值true -->
		<!-- <setting name="useColumnLabel" value="true" /> -->
		<!-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 
			Derby）。 默认值false -->
		<!-- <setting name="useGeneratedKeys" value="false" /> -->
		<!-- 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 
			FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 -->
		<!-- 默认值PARTIAL -->
		<!-- <setting name="autoMappingBehavior" value="PARTIAL" /> -->

		<!-- <setting name="autoMappingUnknownColumnBehavior" value="WARNING" /> -->
		<!-- 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 
			执行器将重用语句并执行批量更新。默认SIMPLE -->
		<!-- <setting name="defaultExecutorType" value="SIMPLE" /> -->
		<!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 -->
		<!-- <setting name="defaultStatementTimeout" value="25" /> -->

		<!-- <setting name="defaultFetchSize" value="100" /> -->
		<!-- 允许在嵌套语句中使用分页（RowBounds）默认值False -->
		<!-- <setting name="safeRowBoundsEnabled" value="false" /> -->
		<!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 
			的类似映射。 默认false -->
		<!-- <setting name="mapUnderscoreToCamelCase" value="false" /> -->
		<!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 
			默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 
			的不同调用将不会共享数据。 -->
		<!-- <setting name="localCacheScope" value="SESSION" /> -->
		<!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 
			NULL、VARCHAR 或 OTHER。 -->
		<!-- <setting name="jdbcTypeForNull" value="OTHER" /> -->
		<!-- 指定哪个对象的方法触发一次延迟加载。 -->
		<!-- <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" /> -->
	</settings>
	<!-- 自定义别名 -->
	<typeAliases>
		<!--单个别名的定义  type:别名映射的类型，alias:别名 -->
		<!-- <typeAlias type="com.meicano.mybatis.po.User" alias="user"/> -->
		
		<!-- 批量别名的定义,自动扫描包下的pojo,别名默认为类名（首字母大写或小写） -->
		<package name="com.meicano.mybatis.po"/>
	<!-- mybati支持自定义功能，通产mabatis提供的类型处理器能够满足需要 -->
	</typeAliases>
	<typeHandlers>
	
	</typeHandlers>
	<!-- 和spring整合后 environments配置将废除 -->
	<environments default="development">
		<environment id="development">
			<!-- 使用jdbc事务管理 -->
			<transactionManager type="JDBC" />
			<!-- 数据库连接池 -->
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>
	
	<!-- 类型处理器将java类型和jdbc类型进行映射 -->
	
	<!--加载mapper映射 如果和spring整合后，可以使用整合包中提供的mapper扫描器，此处的mappers不用配置了。 -->
	<mappers>
		<!-- 通过resource引用mapper的映射文件 -->
		<mapper resource="sqlmap/User.xml" />
		<mapper resource="mapper/UserMapper.xml" />
		<mapper resource="mapper/OrdersCustomMapper.xml" />
		<!-- <mapper resource="mapper/UserMapper.xml" /> -->
		<!-- 通过class引用mapper接口 class：配置mapper接口全限定名， 要求：需要mapper.xml和mapper.java同名并且在一个目录 中 -->
		<!-- <mapper class="cn.itcast.mybatis.mapper.UserMapper"/> -->
		<!-- 批量mapper配置 通过package进行自动扫描包下边的mapper接口， 要求：需要mapper.xml和mapper.java同名并且在一个目录中 -->
		<!-- <package name="com.meicano.mybatis.mapper"/> -->
	</mappers>


</configuration>
